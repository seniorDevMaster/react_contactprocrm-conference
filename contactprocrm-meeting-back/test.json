---- undefined
msgContent:  [
  {
    name: 'vvvv',
    message: 'Room closed.',
    time: '07/07/2020, 02:45:48 AM',
    title: undefined
  }
]
roomLeave:  ----------- {
  events: {
    _eventListener: EventEmitter {
      _events: [Object: null prototype],
      _eventsCount: 26,
      _maxListeners: undefined,
      [Symbol(kCapture)]: false
    },
    emit: [Function: bound emit],
    emitDefault: [Function],
    setDefaultListener: [Function],
    setDefaultListeners: [Function],
    defaultListeners: {
      authenticate: [Function],
      authenticated: [Function],
      connection: [Function],
      disconnect: [Function],
      getIceConfig: [Function],
      roomCreate: [Function],
      roomJoin: [Function],
      roomLeave: [Function],
      log: [Function],
      shutdown: [Function],
      startup: [Function],
      easyrtcAuth: [Function],
      easyrtcCmd: [Function],
      easyrtcMsg: [Function],
      emitEasyrtcCmd: [Function],
      emitEasyrtcMsg: [Function],
      emitError: [Function],
      emitReturnAck: [Function],
      emitReturnError: [Function],
      emitReturnToken: [Function],
      msgTypeGetIceConfig: [Function],
      msgTypeGetRoomList: [Function],
      msgTypeRoomJoin: [Function],
      msgTypeRoomLeave: [Function],
      msgTypeSetPresence: [Function],
      msgTypeSetRoomApiField: [Function]
    },
    on: [Function],
    removeAllListeners: [Function]
  },
  util: {
    deepCopy: [Function],
    nextToNowhere: [Function],
    isError: [Function],
    isWarning: [Function],
    ApplicationError: [Function],
    ApplicationWarning: [Function],
    ConnectionError: [Function],
    ConnectionWarning: [Function],
    ServerError: [Function],
    ServerWarning: [Function],
    getAvailableEasyrtcid: [Function],
    getErrorMsg: [Function],
    getErrorText: [Function],
    log: [Function],
    logDebug: [Function],
    logInfo: [Function],
    logWarning: [Function],
    logError: [Function],
    sendSocketCallbackAck: [Function],
    sendSocketCallbackMsg: [Function],
    isValidIncomingMessage: [Function],
    sendSessionCookie: [Function]
  },
  socket: Socket {
    nsp: Namespace {
      name: '/',
      server: [Server],
      sockets: {},
      connected: {},
      fns: [],
      ids: 0,
      rooms: [],
      flags: {},
      adapter: [Adapter],
      _events: [Object: null prototype],
      _eventsCount: 1
    },
    server: Server {
      nsps: [Object],
      parentNsps: Map {},
      _path: '/socket.io',
      _serveClient: true,
      parser: [Object],
      encoder: Encoder {},
      _adapter: [Function: Adapter],
      _origins: '*:*',
      sockets: [Namespace],
      eio: [Server],
      httpServer: [Server],
      engine: [Server]
    },
    adapter: Adapter {
      nsp: [Namespace],
      rooms: {},
      sids: {},
      encoder: Encoder {}
    },
    id: 'lq_FR56VYnZ0-o7yAAAA',
    client: Client {
      server: [Server],
      conn: [Socket],
      encoder: Encoder {},
      decoder: [Decoder],
      id: 'lq_FR56VYnZ0-o7yAAAA',
      request: [IncomingMessage],
      onclose: [Function: bound ],
      ondata: [Function: bound ],
      onerror: [Function: bound ],
      ondecoded: [Function: bound ],
      sockets: {},
      nsps: {},
      connectBuffer: []
    },
    conn: Socket {
      id: 'lq_FR56VYnZ0-o7yAAAA',
      server: [Server],
      upgrading: false,
      upgraded: true,
      readyState: 'open',
      writeBuffer: [],
      packetsFn: [],
      sentCallbackFn: [],
      cleanupFn: [Array],
      request: [IncomingMessage],
      remoteAddress: '::ffff:127.0.0.1',
      checkIntervalTimer: null,
      upgradeTimeoutTimer: null,
      pingTimeoutTimer: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [Timeout],
        _idleNext: [TimersList],
        _idleStart: 14469,
        _onTimeout: [Function],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: true,
        [Symbol(asyncId)]: 177,
        [Symbol(triggerId)]: 73
      },
      transport: [WebSocket],
      _events: [Object: null prototype],
      _eventsCount: 3
    },
    rooms: {},
    acks: {},
    connected: false,
    disconnected: true,
    handshake: {
      headers: [Object],
      time: 'Tue Jul 07 2020 02:45:44 GMT-0500 (Central Daylight Time)',
      address: '::ffff:127.0.0.1',
      xdomain: true,
      secure: false,
      issued: 1594107944650,
      url: '/socket.io/?EIO=3&transport=polling&t=NCeFDwn',
      query: [Object]
    },
    fns: [],
    flags: {},
    _rooms: [],
    _events: [Object: null prototype] {
      easyrtcAuth: [Function],
      easyrtcCmd: [Function],
      easyrtcMsg: [Function],
      disconnect: [Function]
    },
    _eventsCount: 4
  },
  disconnect: [Function],
  getApp: [Function],
  getAppName: [Function],
  getEasyrtcid: [Function],
  hasFieldValueSync: [Function],
  getField: [Function],
  getFieldSync: [Function],
  getFieldValueSync: [Function],
  getFields: [Function],
  getRoomNames: [Function],
  getSession: [Function],
  getSessionObj: [Function],
  getUsername: [Function],
  getCredential: [Function],
  joinSession: [Function],
  setAuthenticated: [Function],
  setCredential: [Function],
  setField: [Function],
  setPresence: [Function],
  setUsername: [Function],
  emitRoomDataDelta: [Function],
  generateRoomClientList: [Function],
  generateRoomDataDelta: [Function],
  generateRoomList: [Function],
  isAuthenticated: [Function],
  isConnected: [Function],
  isInGroup: [Function],
  isInRoom: [Function],
  joinRoom: [Function],
  room: [Function],
  removeConnection: [Function],
  stillAliveTimer: null
} -------- default [Function]
roomLeave:  ----------- {
  events: {
    _eventListener: EventEmitter {
      _events: [Object: null prototype],
      _eventsCount: 26,
      _maxListeners: undefined,
      [Symbol(kCapture)]: false
    },
    emit: [Function: bound emit],
    emitDefault: [Function],
    setDefaultListener: [Function],
    setDefaultListeners: [Function],
    defaultListeners: {
      authenticate: [Function],
      authenticated: [Function],
      connection: [Function],
      disconnect: [Function],
      getIceConfig: [Function],
      roomCreate: [Function],
      roomJoin: [Function],
      roomLeave: [Function],
      log: [Function],
      shutdown: [Function],
      startup: [Function],
      easyrtcAuth: [Function],
      easyrtcCmd: [Function],
      easyrtcMsg: [Function],
      emitEasyrtcCmd: [Function],
      emitEasyrtcMsg: [Function],
      emitError: [Function],
      emitReturnAck: [Function],
      emitReturnError: [Function],
      emitReturnToken: [Function],
      msgTypeGetIceConfig: [Function],
      msgTypeGetRoomList: [Function],
      msgTypeRoomJoin: [Function],
      msgTypeRoomLeave: [Function],
      msgTypeSetPresence: [Function],
      msgTypeSetRoomApiField: [Function]
    },
    on: [Function],
    removeAllListeners: [Function]
  },
  util: {
    deepCopy: [Function],
    nextToNowhere: [Function],
    isError: [Function],
    isWarning: [Function],
    ApplicationError: [Function],
    ApplicationWarning: [Function],
    ConnectionError: [Function],
    ConnectionWarning: [Function],
    ServerError: [Function],
    ServerWarning: [Function],
    getAvailableEasyrtcid: [Function],
    getErrorMsg: [Function],
    getErrorText: [Function],
    log: [Function],
    logDebug: [Function],
    logInfo: [Function],
    logWarning: [Function],
    logError: [Function],
    sendSocketCallbackAck: [Function],
    sendSocketCallbackMsg: [Function],
    isValidIncomingMessage: [Function],
    sendSessionCookie: [Function]
  },
  socket: Socket {
    nsp: Namespace {
      name: '/',
      server: [Server],
      sockets: {},
      connected: {},
      fns: [],
      ids: 0,
      rooms: [],
      flags: {},
      adapter: [Adapter],
      _events: [Object: null prototype],
      _eventsCount: 1
    },
    server: Server {
      nsps: [Object],
      parentNsps: Map {},
      _path: '/socket.io',
      _serveClient: true,
      parser: [Object],
      encoder: Encoder {},
      _adapter: [Function: Adapter],
      _origins: '*:*',
      sockets: [Namespace],
      eio: [Server],
      httpServer: [Server],
      engine: [Server]
    },
    adapter: Adapter {
      nsp: [Namespace],
      rooms: {},
      sids: {},
      encoder: Encoder {}
    },
    id: 'lq_FR56VYnZ0-o7yAAAA',
    client: Client {
      server: [Server],
      conn: [Socket],
      encoder: Encoder {},
      decoder: [Decoder],
      id: 'lq_FR56VYnZ0-o7yAAAA',
      request: [IncomingMessage],
      onclose: [Function: bound ],
      ondata: [Function: bound ],
      onerror: [Function: bound ],
      ondecoded: [Function: bound ],
      sockets: {},
      nsps: {},
      connectBuffer: []
    },
    conn: Socket {
      id: 'lq_FR56VYnZ0-o7yAAAA',
      server: [Server],
      upgrading: false,
      upgraded: true,
      readyState: 'open',
      writeBuffer: [],
      packetsFn: [],
      sentCallbackFn: [],
      cleanupFn: [Array],
      request: [IncomingMessage],
      remoteAddress: '::ffff:127.0.0.1',
      checkIntervalTimer: null,
      upgradeTimeoutTimer: null,
      pingTimeoutTimer: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [Timeout],
        _idleNext: [TimersList],
        _idleStart: 14469,
        _onTimeout: [Function],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: true,
        [Symbol(asyncId)]: 177,
        [Symbol(triggerId)]: 73
      },
      transport: [WebSocket],
      _events: [Object: null prototype],
      _eventsCount: 3
    },
    rooms: {},
    acks: {},
    connected: false,
    disconnected: true,
    handshake: {
      headers: [Object],
      time: 'Tue Jul 07 2020 02:45:44 GMT-0500 (Central Daylight Time)',
      address: '::ffff:127.0.0.1',
      xdomain: true,
      secure: false,
      issued: 1594107944650,
      url: '/socket.io/?EIO=3&transport=polling&t=NCeFDwn',
      query: [Object]
    },
    fns: [],
    flags: {},
    _rooms: [],
    _events: [Object: null prototype] {
      easyrtcAuth: [Function],
      easyrtcCmd: [Function],
      easyrtcMsg: [Function],
      disconnect: [Function]
    },
    _eventsCount: 4
  },
  disconnect: [Function],
  getApp: [Function],
  getAppName: [Function],
  getEasyrtcid: [Function],
  hasFieldValueSync: [Function],
  getField: [Function],
  getFieldSync: [Function],
  getFieldValueSync: [Function],
  getFields: [Function],
  getRoomNames: [Function],
  getSession: [Function],
  getSessionObj: [Function],
  getUsername: [Function],
  getCredential: [Function],
  joinSession: [Function],
  setAuthenticated: [Function],
  setCredential: [Function],
  setField: [Function],
  setPresence: [Function],
  setUsername: [Function],
  emitRoomDataDelta: [Function],
  generateRoomClientList: [Function],
  generateRoomDataDelta: [Function],
  generateRoomList: [Function],
  isAuthenticated: [Function],
  isConnected: [Function],
  isInGroup: [Function],
  isInRoom: [Function],
  joinRoom: [Function],
  room: [Function],
  removeConnection: [Function],
  stillAliveTimer: null
} -------- nizdichir-86fad9e7 [Function]